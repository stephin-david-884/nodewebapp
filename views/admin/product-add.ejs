<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
    <style>
        /* General Styling */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        :root {
            --primary-color: #1e90ff;
            --secondary-color: #2d3436;
            --success-color: #00b894;
            --danger-color: #d63031;
            --info-color: #0984e3;
            --light-gray: #dfe6e9;
            --background-color: #f5f6fa;
            --white: #ffffff;
            --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
            --transition: all 0.3s ease;
        }

        .error-message {
            color: red;
            font-size: 0.875rem;
        }

        /* Main Section Styling */
        .content-main {
            padding: 3rem 2rem;
        }

        .content-header {
            margin-bottom: 2rem;
        }

        .content-title {
            font-size: 2rem;
            font-weight: bold;
        }

        /* Form Styling */
        .form-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        .form-group input[type="number"] {
            -moz-appearance: textfield;
        }

        .form-group select {
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            justify-content: flex-start;
            margin-top: 1.5rem;
        }

        .form-actions button {
            background-color: #007bff;
            color: white;
            padding: 0.75rem 1.5rem;
            font-size: 1.125rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .form-actions button:hover {
            background-color: #0056b3;
        }

        /* Image Preview Styling */
        .image-preview {
            max-width: 100%;
            max-height: 200px;
            border: 1px solid #ddd;
            margin-top: 10px;
            border-radius: 8px;
        }

        .image-upload-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .thumbnail {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .thumbnail img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 50%;
            margin-right: 10px;
        }
    </style>
</head>

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Add New Product</h2>
    </div>
    <form id="productForm" method="POST" action="/admin/addProducts" enctype="multipart/form-data">
        <div class="form-container">
            <div class="form-group">
                <label for="product_name">Product Name</label>
                <input type="text" name="productName" id="product_name" placeholder="Enter product name">
                <div id="productName-error" class="error-message"></div>
            </div>


            <div class="form-group">
                <label for="description">Description</label>
                <input type="text" name="description" id="description" placeholder="Enter product description" class="form-control">
                <div id="description-error" class="error-message"></div>
            </div>
            

            <div class="form-group">
                <label for="brand">Brand</label>
                <select class="form-select border" name="brand">
                    <%for(let i=0;i<brand.length;i++){%>
                    <option value="<%=brand[i].brandName%>">
                        <%=brand[i].brandName%>
                    </option>
                    <%}%>
                </select>
                <div id="brand-error" class="error-message"></div>
            </div>


            <div class="form-group">
                <label for="regularPrice">Regular Price</label>
                <input type="number" name="regularPrice" id="regularPrice" step="0.01" placeholder="Enter regular price">
                <div id="regularPrice-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="salePrice">Sale Price</label>
                <input type="number" name="salePrice" id="salePrice" step="0.01" placeholder="Enter sale price">
                <div id="salePrice-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <input type="number" name="quantity" id="quantity" placeholder="Enter quantity">
                <div id="quantity-error" class="error-message"></div>
            </div>

            <div class="form-group">
                <label for="color">Color</label>
                <input type="text" name="color" id="color" placeholder="Enter color">
                <div id="color-error" class="error-message"></div>
            </div>


            <div class="form-group">
                <label for="category">Category</label>
                <select name="category" id="category">
                    <% for (let i = 0; i < cat.length; i++) { %>
                        <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                    <% } %>
                </select>
                <div id="category-error" class="error-message"></div>
            </div>
        </div>

        <div class="image-upload-container">
            <h4>Product Images</h4>
        
            <% for (let i = 1; i <= 4; i++) { %>
                <div class="form-group">
                    <!-- File input to choose image -->
                    <label for="image<%= i %>">Image <%= i %></label>
                    <input type="file" name="image<%= i %>" id="image<%= i %>" class="form-control"
                           accept="image/*" onchange="previewImage(event,<%=i%>)">
        
                    <!-- Container to preview and crop -->
                    <div class="preview-container" style="margin-top: 10px; display: none;">
                        <img id="preview<%= i %>" src="#" alt="Image preview" class="image-preview">
        
                        <!-- Crop button for that image -->
                        <button type="button" class="crop-save-btn" data-index="<%= i %>" style="display: none;">
                            Crop & Save
                        </button>
                    </div>
        
                    <!-- Hidden input to hold base64 data -->
                    <input type="hidden" name="croppedImage<%= i %>" id="croppedImage<%= i %>" value="">
        
                    <!-- Error message div -->
                    <div id="image<%= i %>-error" class="error-message"></div>
                </div>
            <% } %>
        </div>
        

        <div class="form-actions">
            <button type="submit">Publish Product</button>
        </div>
    </form>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
    let croppers = {};
    let croppedImagesStatus = [false, false, false, false]; // Track if each image is processed (cropped or not)

    function previewImage(event, index) {
        const input = event.target;
        const previewContainer = input.parentElement.querySelector('.preview-container');
        const preview = document.getElementById(`preview${index}`);
        const errorDiv = document.getElementById(`image${index}-error`);
        const cropBtn = previewContainer.querySelector('.crop-save-btn');

        // Reset previous states
        previewContainer.style.display = 'none';
        errorDiv.textContent = '';
        cropBtn.style.display = 'none';
        if (croppers[index]) {
            croppers[index].destroy();
            delete croppers[index];
        }
        croppedImagesStatus[index - 1] = false; // Reset status when a new image is selected

        if (input.files && input.files[0]) {
            const file = input.files[0];
            const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];
            const maxSize = 5 * 1024 * 1024; // 5MB

            if (!validImageTypes.includes(file.type)) {
                errorDiv.textContent = 'Please select a valid image file (JPEG, PNG, GIF, BMP, or WebP)';
                input.value = '';
                return;
            }

            if (file.size > maxSize) {
                errorDiv.textContent = 'Image file size must be less than 5MB';
                input.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                preview.src = e.target.result;
                previewContainer.style.display = 'block';
                cropBtn.style.display = 'inline-block';

                croppers[index] = new Cropper(preview, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 1,
                    ready: function() {
                        this.cropper.crop();
                    }
                });
            };
            reader.readAsDataURL(file);
        }
    }

    // Event listener for the Crop & Save button
    document.querySelectorAll('.crop-save-btn').forEach(button => {
        button.addEventListener('click', function() {
            const index = parseInt(this.dataset.index);
            const previewContainer = this.parentElement;
            const preview = previewContainer.querySelector('img');
            const cropBtn = this;

            if (croppers[index]) {
                const croppedDataUrl = croppers[index].getCroppedCanvas().toDataURL('image/jpeg');
                document.getElementById(`croppedImage${index}`).value = croppedDataUrl;
                preview.src = croppedDataUrl;
                cropBtn.style.display = 'none';
                croppedImagesStatus[index - 1] = true;
                croppers[index].destroy();
                delete croppers[index];

                Swal.fire({
                    icon: 'success',
                    title: 'Image Cropped!',
                    text: `Image ${index} has been cropped and saved.`,
                    timer: 1200,
                    showConfirmButton: false
                });
            } else {
                // If cropper is not initialized (image might not have been fully loaded)
                Swal.fire({
                    icon: 'warning',
                    title: 'Wait!',
                    text: `Please wait for the image ${index} to load before cropping.`,
                    timer: 1500,
                    showConfirmButton: false
                });
            }
        });
    });

    document.getElementById('productForm').addEventListener('submit', function(e) {
        e.preventDefault();

        // Form validation
        let isValid = true;
        const requiredFields = ['productName',  'brand', 'regularPrice', 'salePrice', 'quantity', 'color', 'category'];

        // Clear previous error messages
        requiredFields.forEach(field => {
            document.getElementById(`${field}-error`).textContent = '';
        });

        // Validate required fields
        requiredFields.forEach(field => {
    const input = document.getElementsByName(field)[0];
    if (!input || !input.value || !input.value.trim()) {
        isValid = false;
        const errorEl = document.getElementById(`${field}-error`);
        if (errorEl) errorEl.textContent = 'This field is required.';
    }
    const description = document.getElementById('description').value.trim();
if (!description) {
    isValid = false;
    const errorEl = document.getElementById('description-error');
    if (errorEl) errorEl.textContent = 'Description is required.';
}
    
});


        // Get price and quantity values
        const quantity = parseInt(document.getElementById('quantity').value);
        const regularPrice = parseFloat(document.getElementById('regularPrice').value);
        const salePrice = parseFloat(document.getElementById('salePrice').value);

        // Validate quantity
        if (isNaN(quantity) || quantity < 0) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Quantity!',
                text: 'Quantity cannot be less than zero',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            document.getElementById('quantity-error').textContent = 'Quantity cannot be less than zero';
            return;
        }

        // Validate regular price
        if (isNaN(regularPrice) || regularPrice <= 0) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Regular Price!',
                text: 'Regular price must be greater than zero',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            document.getElementById('regularPrice-error').textContent = 'Regular price must be greater than zero';
            return;
        }

        // Validate sale price
        if (isNaN(salePrice) || salePrice <= 0) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Sale Price!',
                text: 'Sale price must be greater than zero',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            document.getElementById('salePrice-error').textContent = 'Sale price must be greater than zero';
            return;
        }

        // Validate sale price is not higher than regular price
        if (salePrice > regularPrice) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Price!',
                text: 'Sale price cannot be higher than regular price',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            document.getElementById('salePrice-error').textContent = 'Sale price cannot be higher than regular price';
            return;
        }

        // Check if all 4 images are processed (either uploaded or cropped)
        const allImagesProcessed = croppedImagesStatus.every(status => status === true);
        let imageUploadedCount = 0;
        for (let i = 1; i <= 4; i++) {
            if (document.getElementById(`image${i}`).files.length > 0 || document.getElementById(`croppedImage${i}`).value) {
                imageUploadedCount++;
            }
        }

        if (imageUploadedCount < 4) {
            isValid = false;
            Swal.fire({
                title: 'Images Required!',
                text: 'Please upload all 4 product images',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (isValid) {
            const formData = new FormData(this);
            fetch('/admin/addProducts', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Product added successfully',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/admin/products'; // or any success redirect
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'An error occurred while adding the product',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An unexpected error occurred',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                console.error('Save error:', error);
            });
        }
    });

    // Add real-time validation for quantity, regular price, and sale price
    document.getElementById('quantity').addEventListener('input', function() {
        const quantity = parseInt(this.value);
        if (isNaN(quantity) || quantity < 0) {
            document.getElementById('quantity-error').textContent = 'Quantity cannot be less than zero';
        } else {
            document.getElementById('quantity-error').textContent = '';
        }
    });

    document.getElementById('regularPrice').addEventListener('input', function() {
        const regularPrice = parseFloat(this.value);
        const salePrice = parseFloat(document.getElementById('salePrice').value);

        if (isNaN(regularPrice) || regularPrice <= 0) {
            document.getElementById('regularPrice-error').textContent = 'Regular price must be greater than zero';
        } else {
            document.getElementById('regularPrice-error').textContent = '';
        }

        // Check sale price relationship
        if (!isNaN(salePrice) && salePrice > regularPrice) {
            document.getElementById('salePrice-error').textContent = 'Sale price cannot be higher than regular price';
        } else {
            document.getElementById('salePrice-error').textContent = '';
        }
    });

    document.getElementById('salePrice').addEventListener('input', function() {
        const salePrice = parseFloat(this.value);
        const regularPrice = parseFloat(document.getElementById('regularPrice').value);

        if (isNaN(salePrice) || salePrice <= 0) {
            document.getElementById('salePrice-error').textContent = 'Sale price must be greater than zero';
        } else if (!isNaN(regularPrice) && salePrice > regularPrice) {
            document.getElementById('salePrice-error').textContent = 'Sale price cannot be higher than regular price';
        } else {
            document.getElementById('salePrice-error').textContent = '';
        }
    });
</script>

<%- include("../../views/partials/admin/footer") %>