<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    
    <style>
        :root {
      --primary-color: #1e90ff;
      --secondary-color: #2d3436;
      --success-color: #00b894;
      --danger-color: #d63031;
      --info-color: #0984e3;
      --light-gray: #dfe6e9;
      --background-color: #f5f6fa;
      --white: #ffffff;
      --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
      --transition: all 0.3s ease;
    }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .thumbnail {
            position: relative;
            width: 150px;
        }
        .thumbnail img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            font-size: 12px;
            cursor: pointer;
        }
        .cropper-container {
            width: 100%;
            max-width: 500px;
            margin: 20px auto;
        }
        .error-message {
            color: red;
            font-size: 0.875rem;
        }
        .is-invalid {
        border-color: var(--danger-color) !important;
        }
    </style>
</head>
<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
    </div>
    <div class="card mb-4">
        <div class="card-body">
            <form id="editProductForm" method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="mb-4">
                    <label for="product_name" class="form-label">Product Name</label>
                    <input type="text" name="productName" value="<%= product.productName %>" class="form-control" id="product_name" >
                    <div id="productName-error" class="error-message"></div>
                </div>
                
                <div class="mb-4">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control" rows="4" required><%= product.description %></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>

                

                <div class="row">
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Regular Price</label>
                            <input name="regularPrice" type="number" value="<%= product.regularPrice %>" class="form-control" >
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Sale Price</label>
                            <input name="salePrice" type="number" value="<%= product.salePrice %>" class="form-control" >
                            <div id="salePrice-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Quantity</label>
                            <input name="quantity" type="number" value="<%= product.quantity %>" class="form-control" >
                            <div id="quantity-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Color</label>
                            <input name="color" type="text" value="<%= product.color %>" class="form-control" >
                            <div id="color-error" class="error-message"></div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-4">
                        <div class="mb-4">
                            <label for="brand">Brand</label>
                                <select class="form-select border" name="brand">
                                    <%for(let i=0;i<brand.length;i++){%>
                                    <option value="<%=brand[i].brandName%>">
                                        <%=brand[i].brandName%>
                                    </option>
                                    <%}%>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                        </div>
                    </div>
                    
                    
                </div>

                

                

                <div class="mb-4">
                    <label class="form-label">Category</label>
                    <select class="form-select" name="category" required>
                        <% for(let i = 0; i < cat.length; i++) { %>
                            <option value="<%= cat[i]._id %>" <%= product.category.equals(cat[i]._id) ? 'selected' : '' %>>
                                <%= cat[i].name %>
                            </option>
                        <% } %>
                    </select>
                    <div id="category-error" class="error-message"></div>
                </div>

                <div class="mb-4">
                    <label class="form-label">Product Images</label>
                    <div class="row">
                        <% for(let i = 0; i < 4; i++) { %>
                            <div class="col-md-3 mb-3">
                                <div class="card">
                                    <% if(product.productImage[i]) { %>
                                        <img src="/<%= product.productImage[i] %>" class="card-img-top" alt="Product Image">
                                        <div class="card-body">
                                            <button type="button" class="btn btn-danger btn-sm" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>', <%= i %>)">Delete</button>
                                        </div>
                                    <% } else { %>
                                        <div class="card-body">
                                            <div class="image-upload-container">
                                                <input type="file" id="image<%= i+1 %>" name="image<%= i+1 %>" accept="image/*" class="form-control image-input" data-index="<%= i %>" onchange="previewImage(event, <%= i %>)">

                                                <div class="preview-container" style="margin-top: 10px; display: none;">
                                                    <img id="preview<%= i %>" src="#" alt="Image preview" style="max-width: 100%; height: auto;">
                                                </div>
                                                <input type="hidden" name="croppedImage<%= i+1 %>" id="croppedImage<%= i+1 %>" value="">
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
                
  

                <div class="mb-4">
                    <button class="btn btn-primary" type="submit">Update Product</button>
                </div>
            </form>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<!-- Cropper.js & Bootstrap -->


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



<script>
    let croppers = {};
    let croppedImagesStatus = [false, false, false, false];

    function previewImage(event, index) {
        const input = event.target;
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewContainer = input.parentElement.querySelector('.preview-container');
                previewContainer.style.display = 'block';
                
                const preview = document.getElementById(`preview${index}`);
                preview.src = e.target.result;
                preview.style.display = 'block';

                if (croppers[index]) {
                    croppers[index].destroy();
                }

                croppers[index] = new Cropper(preview, {
                    aspectRatio: 1,
                    viewMode: 1,
                    ready: function() {
                        this.cropper.crop();
                        croppedImagesStatus[index] = true;
                    }
                });
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    document.getElementById('editProductForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        let isValid = true;
        const requiredFields = ['productName', 'brand', 'regularPrice', 'salePrice', 'quantity', 'color', 'category'];

        // Clear previous error messages
        requiredFields.forEach(field => {
            document.getElementById(`${field}-error`).textContent = '';
        });

        // Validate required fields
        requiredFields.forEach(field => {
            const input = document.getElementsByName(field)[0];
            if (!input || !input.value || !input.value.trim()) {
                isValid = false;
                const errorEl = document.getElementById(`${field}-error`);
                if (errorEl) errorEl.textContent = 'This field is required.';
            }
        });

        const quantity = parseInt(document.querySelector('input[name="quantity"]').value);
        const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
        const salePrice = parseFloat(document.querySelector('input[name="salePrice"]').value);

        if (isNaN(quantity) || quantity < 0) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Quantity!',
                text: 'Quantity cannot be less than zero',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (regularPrice <= 0) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Regular Price!',
                text: 'Regular price must be greater than zero',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (isNaN(regularPrice) || salePrice <= 0) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Sale Price!',
                text: 'Sale price must be greater than zero',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (salePrice > regularPrice) {
            isValid = false;
            Swal.fire({
                title: 'Invalid Price!',
                text: 'Sale price cannot be higher than regular price',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        // ✅ Check if exactly 4 images are uploaded, cropped, or exist
        let existingImages = <%- JSON.stringify(product.productImage) %>;
let imageUploadedCount = 0;

for (let i = 0; i < 4; i++) {
    const imageInput = document.getElementById(`image${i+1}`);
    const croppedInput = document.getElementById(`croppedImage${i+1}`);

    const hasNewUpload = imageInput && imageInput.files.length > 0;
    const hasCropped = croppedInput && croppedInput.value;
    const hasExisting = existingImages[i] && existingImages[i] !== "";

    if (hasNewUpload || hasCropped || hasExisting) {
        imageUploadedCount++;
    }
}

if (imageUploadedCount < 4) {
    isValid = false;
    Swal.fire({
        title: 'Images Required!',
        text: 'Please upload all 4 product images',
        icon: 'error',
        confirmButtonText: 'OK'
    });
    return;
}


        if (isValid) {
            for (let i = 0; i < 4; i++) {
                if (croppers[i]) {
                    const croppedDataUrl = croppers[i].getCroppedCanvas().toDataURL('image/jpeg');
                    document.getElementById(`croppedImage${i+1}`).value = croppedDataUrl;
                }
            }

            const formData = new FormData(this);
            
            fetch(this.action, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Product updated successfully',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/admin/products';
                        }
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'An error occurred while updating the product',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An unexpected error occurred',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
        }
    });

    // Real-time validations
    document.querySelector('input[name="quantity"]').addEventListener('input', function() {
        const quantity = parseInt(this.value);
        if (quantity < 0) {
            this.setCustomValidity('Quantity cannot be less than zero');
            this.reportValidity();
        } else {
            this.setCustomValidity('');
        }
    });

    document.querySelector('input[name="regularPrice"]').addEventListener('input', function() {
        const regularPrice = parseFloat(this.value);
        const salePrice = parseFloat(document.querySelector('input[name="salePrice"]').value);
        
        if (regularPrice <= 0) {
            this.setCustomValidity('Regular price must be greater than zero');
            this.reportValidity();
        } else {
            this.setCustomValidity('');
            if (salePrice && salePrice > regularPrice) {
                document.querySelector('input[name="salePrice"]').setCustomValidity('Sale price cannot be higher than regular price');
                document.querySelector('input[name="salePrice"]').reportValidity();
            } else {
                document.querySelector('input[name="salePrice"]').setCustomValidity('');
            }
        }
    });

    document.querySelector('input[name="salePrice"]').addEventListener('input', function() {
        const salePrice = parseFloat(this.value);
        const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
        
        if (salePrice <= 0) {
            this.setCustomValidity('Sale price must be greater than zero');
            this.reportValidity();
        } else if (regularPrice && salePrice > regularPrice) {
            this.setCustomValidity('Sale price cannot be higher than regular price');
            this.reportValidity();
        } else {
            this.setCustomValidity('');
        }
    });

    function deleteSingleImage(imageName, productId, index) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        imageNameToServer: imageName,
                        productIdToServer: productId,
                        imageIndex: index
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status) {
                        Swal.fire('Deleted!', 'Your image has been deleted.', 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error!', 'Failed to delete image', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire('Error!', 'An error occurred while deleting the image', 'error');
                });
            }
        });
    }
</script>


<%- include("../../views/partials/admin/footer") %>